<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.example.application.community.mapper.CommunityReadMapper">



    <select id="searchResultCnt" parameterType="com.example.application.community.dto.SearchCondition" resultType="int">
        SELECT count(*)
        FROM COMMUNITY
        <where>
            <if test="keyword != null and keyword != ''">
                AND title LIKE concat('%', #{keyword}, '%')
            </if>
        </where>
    </select>


    <select id="selectAllCommunityTag" parameterType="com.example.application.community.dto.SearchCondition" resultMap="communityTagResultMap">
        SELECT DISTINCT c.communityId, c.title, a.nickname, c.views, c.commentCount, c.createdAt, l.likesCount as likes,  GROUP_CONCAT(t.tagTitle SEPARATOR ',') AS tagTitle, c.modifiedAt, c.deleted
        FROM community c
        INNER JOIN account a ON c.accountId = a.accountId
        LEFT OUTER JOIN communityTag ct ON c.communityId = ct.communityId
        LEFT OUTER JOIN tag t ON ct.tagId = t.tagId
        LEFT OUTER JOIN likes l ON c.communityId = l.communityId
        WHERE
        (
        l.createdAt = (
        SELECT MAX(createdAt)
        FROM likes
        WHERE communityId = c.communityId
        )
        OR l.createdAt IS NULL
        )

        <if test="keyword != null and keyword != ''">
            AND (c.title LIKE concat('%', #{keyword}, '%') OR t.tagTitle LIKE concat('%', #{keyword}, '%'))
        </if>
        GROUP BY c.communityId
        ORDER BY c.communityId DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <resultMap id="communityTagResultMap" type="com.example.application.community.dto.CommunityDto$CommunityTagResultDto">
        <id property="communityId" column="communityId"/>
        <result property="title" column="title"/>
        <result property="nickname" column="nickname"/>
        <result property="views" column="views"/>
        <result property="commentCount" column="commentCount"/>
        <result property="createdAt" column="createdAt"/>
        <result property="likes" column="likes"/>
        <result property="modifiedAt" column="modifiedAt" />
        <result property="deleted" column="deleted" />
        <collection property="tagTitle" ofType="java.lang.String">
            <result column="tagTitle"/>
        </collection>
    </resultMap>


    <select id="selectCommunityByCommunityId" parameterType="Long" resultMap="articleDtoResultMap">
        SELECT c.communityId, c.title, c.accountId, a.nickname, c.content, c.views, c.createdAt, l.likesCount as likes, t.tagTitle, c.modifiedAt
        FROM community c
                 INNER JOIN account a ON c.accountId = a.accountId
                 LEFT OUTER JOIN communityTag ct ON c.communityId = ct.communityId
                 LEFT OUTER JOIN tag t ON ct.tagId = t.tagId
                 LEFT OUTER JOIN likes l ON c.communityId = l.communityId
        WHERE c.communityId = #{communityId}
          AND (
                    l.createdAt = (
                    SELECT MAX(createdAt)
                    FROM likes
                    WHERE communityId = c.communityId
                )
                OR l.createdAt IS NULL
            )

    </select>

    <resultMap id="articleDtoResultMap" type="com.example.application.community.dto.CommunityDto$ArticleDto">
        <id property="communityId" column="communityId"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="accountId" column="accountId" />
        <result property="nickname" column="nickname"/>
        <result property="views" column="views"/>
        <result property="createdAt" column="createdAt"/>
        <result property="likes" column="likes"/>
        <result property="modifiedAt" column="modifiedAt" />
        <collection property="tagTitle" ofType="java.lang.String">
            <result column="tagTitle"/>
        </collection>
    </resultMap>



    <select id="selectArticleUpdateByCommunityId" parameterType="Long" resultType="com.example.application.community.dto.CommunityDto$ArticleModificationFormDto">
        SELECT c.communityId, c.title ,c.accountId , c.content
        FROM community c
        WHERE c.communityId = #{communityId}
    </select>

    <select id="selectLikesCommunityRanking" resultType="com.example.application.community.dto.RankIngLikesDto">
        SELECT communityId, title, createdAt, likes
        FROM community
        WHERE WEEK(createdAt) = WEEK(NOW())
        ORDER BY likes DESC
        LIMIT 5;
    </select>




</mapper>